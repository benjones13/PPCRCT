// Generated by rstantools.  Do not edit by hand.

/*
    PPCRCT is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    PPCRCT is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with PPCRCT.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_Hier_PP_hnormal_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_Hier_PP_hnormal");
    reader.add_event(85, 83, "end", "model_Hier_PP_hnormal");
    return reader;
}
template <typename T0__>
int
which_min(const std::vector<T0__>& y, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 3;
        int ans(0);
        (void) ans;  // dummy to suppress unused var warning
        stan::math::fill(ans, std::numeric_limits<int>::min());
        stan::math::assign(ans,get_base1(sort_indices_asc(y), 1, "sort_indices_asc(y)", 1));
        current_statement_begin__ = 4;
        return stan::math::promote_scalar<fun_return_scalar_t__>(ans);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct which_min_functor__ {
    template <typename T0__>
        int
    operator()(const std::vector<T0__>& y, std::ostream* pstream__) const {
        return which_min(y, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
approximate_ca0(const T0__& x,
                    const std::vector<T1__>& x_pred,
                    const std::vector<T2__>& y_pred, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 7;
        int K(0);
        (void) K;  // dummy to suppress unused var warning
        stan::math::fill(K, std::numeric_limits<int>::min());
        stan::math::assign(K,size(x_pred));
        current_statement_begin__ = 8;
        validate_non_negative_index("deltas", "K", K);
        std::vector<local_scalar_t__  > deltas(K, local_scalar_t__(DUMMY_VAR__));
        stan::math::initialize(deltas, DUMMY_VAR__);
        stan::math::fill(deltas, DUMMY_VAR__);
        current_statement_begin__ = 9;
        local_scalar_t__ ans(DUMMY_VAR__);
        (void) ans;  // dummy to suppress unused var warning
        stan::math::initialize(ans, DUMMY_VAR__);
        stan::math::fill(ans, DUMMY_VAR__);
        current_statement_begin__ = 10;
        int i(0);
        (void) i;  // dummy to suppress unused var warning
        stan::math::fill(i, std::numeric_limits<int>::min());
        current_statement_begin__ = 11;
        if (as_bool(logical_neq(size(y_pred), K))) {
            current_statement_begin__ = 11;
            std::stringstream errmsg_stream__;
            errmsg_stream__ << "x_pred and y_pred aren\'t of the same size";
            throw std::domain_error(errmsg_stream__.str());
        }
        current_statement_begin__ = 12;
        for (int k = 1; k <= K; ++k) {
            current_statement_begin__ = 12;
            stan::model::assign(deltas, 
                        stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                        stan::math::fabs((get_base1(x_pred, k, "x_pred", 1) - x)), 
                        "assigning variable deltas");
        }
        current_statement_begin__ = 13;
        stan::math::assign(i, which_min(deltas, pstream__));
        current_statement_begin__ = 14;
        if (as_bool(logical_neq(i, 1))) {
            {
            current_statement_begin__ = 15;
            local_scalar_t__ x1(DUMMY_VAR__);
            (void) x1;  // dummy to suppress unused var warning
            stan::math::initialize(x1, DUMMY_VAR__);
            stan::math::fill(x1, DUMMY_VAR__);
            stan::math::assign(x1,get_base1(x_pred, i, "x_pred", 1));
            current_statement_begin__ = 16;
            local_scalar_t__ x2(DUMMY_VAR__);
            (void) x2;  // dummy to suppress unused var warning
            stan::math::initialize(x2, DUMMY_VAR__);
            stan::math::fill(x2, DUMMY_VAR__);
            stan::math::assign(x2,get_base1(x_pred, (i + 1), "x_pred", 1));
            current_statement_begin__ = 17;
            local_scalar_t__ y1(DUMMY_VAR__);
            (void) y1;  // dummy to suppress unused var warning
            stan::math::initialize(y1, DUMMY_VAR__);
            stan::math::fill(y1, DUMMY_VAR__);
            stan::math::assign(y1,get_base1(y_pred, i, "y_pred", 1));
            current_statement_begin__ = 18;
            local_scalar_t__ y2(DUMMY_VAR__);
            (void) y2;  // dummy to suppress unused var warning
            stan::math::initialize(y2, DUMMY_VAR__);
            stan::math::fill(y2, DUMMY_VAR__);
            stan::math::assign(y2,get_base1(y_pred, (i + 1), "y_pred", 1));
            current_statement_begin__ = 19;
            stan::math::assign(ans, (y1 + (((y2 - y1) * (x - x1)) / (x2 - x1))));
            }
        } else {
            current_statement_begin__ = 21;
            stan::math::assign(ans, get_base1(y_pred, i, "y_pred", 1));
        }
        current_statement_begin__ = 23;
        return stan::math::promote_scalar<fun_return_scalar_t__>(ans);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct approximate_ca0_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& x,
                    const std::vector<T1__>& x_pred,
                    const std::vector<T2__>& y_pred, std::ostream* pstream__) const {
        return approximate_ca0(x, x_pred, y_pred, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_Hier_PP_hnormal
  : public stan::model::model_base_crtp<model_Hier_PP_hnormal> {
private:
        int N0;
        int J0;
        int N;
        int J;
        int P;
        std::vector<double> y0;
        std::vector<double> y;
        std::vector<int> Z0;
        std::vector<int> Z;
        matrix_d X0;
        matrix_d X;
        double intercept_prior_mean;
        double intercept_prior_sd;
        std::vector<double> reg_prior_mean;
        std::vector<double> reg_prior_sd;
        double sigma_b_prior;
        double sigma_prior;
        int K;
        std::vector<double> a0_grid;
        std::vector<double> C_grid;
public:
    model_Hier_PP_hnormal(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_Hier_PP_hnormal(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_Hier_PP_hnormal_namespace::model_Hier_PP_hnormal";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 28;
            context__.validate_dims("data initialization", "N0", "int", context__.to_vec());
            N0 = int(0);
            vals_i__ = context__.vals_i("N0");
            pos__ = 0;
            N0 = vals_i__[pos__++];
            check_greater_or_equal(function__, "N0", N0, 1);
            current_statement_begin__ = 29;
            context__.validate_dims("data initialization", "J0", "int", context__.to_vec());
            J0 = int(0);
            vals_i__ = context__.vals_i("J0");
            pos__ = 0;
            J0 = vals_i__[pos__++];
            check_greater_or_equal(function__, "J0", J0, 1);
            current_statement_begin__ = 30;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 31;
            context__.validate_dims("data initialization", "J", "int", context__.to_vec());
            J = int(0);
            vals_i__ = context__.vals_i("J");
            pos__ = 0;
            J = vals_i__[pos__++];
            check_greater_or_equal(function__, "J", J, 1);
            current_statement_begin__ = 32;
            context__.validate_dims("data initialization", "P", "int", context__.to_vec());
            P = int(0);
            vals_i__ = context__.vals_i("P");
            pos__ = 0;
            P = vals_i__[pos__++];
            check_greater_or_equal(function__, "P", P, 1);
            current_statement_begin__ = 33;
            validate_non_negative_index("y0", "N0", N0);
            context__.validate_dims("data initialization", "y0", "double", context__.to_vec(N0));
            y0 = std::vector<double>(N0, double(0));
            vals_r__ = context__.vals_r("y0");
            pos__ = 0;
            size_t y0_k_0_max__ = N0;
            for (size_t k_0__ = 0; k_0__ < y0_k_0_max__; ++k_0__) {
                y0[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 34;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "double", context__.to_vec(N));
            y = std::vector<double>(N, double(0));
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                y[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 35;
            validate_non_negative_index("Z0", "N0", N0);
            context__.validate_dims("data initialization", "Z0", "int", context__.to_vec(N0));
            Z0 = std::vector<int>(N0, int(0));
            vals_i__ = context__.vals_i("Z0");
            pos__ = 0;
            size_t Z0_k_0_max__ = N0;
            for (size_t k_0__ = 0; k_0__ < Z0_k_0_max__; ++k_0__) {
                Z0[k_0__] = vals_i__[pos__++];
            }
            size_t Z0_i_0_max__ = N0;
            for (size_t i_0__ = 0; i_0__ < Z0_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Z0[i_0__]", Z0[i_0__], 0);
                check_less_or_equal(function__, "Z0[i_0__]", Z0[i_0__], J0);
            }
            current_statement_begin__ = 36;
            validate_non_negative_index("Z", "N", N);
            context__.validate_dims("data initialization", "Z", "int", context__.to_vec(N));
            Z = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("Z");
            pos__ = 0;
            size_t Z_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < Z_k_0_max__; ++k_0__) {
                Z[k_0__] = vals_i__[pos__++];
            }
            size_t Z_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < Z_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "Z[i_0__]", Z[i_0__], 0);
                check_less_or_equal(function__, "Z[i_0__]", Z[i_0__], J);
            }
            current_statement_begin__ = 37;
            validate_non_negative_index("X0", "N0", N0);
            validate_non_negative_index("X0", "P", P);
            context__.validate_dims("data initialization", "X0", "matrix_d", context__.to_vec(N0,P));
            X0 = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N0, P);
            vals_r__ = context__.vals_r("X0");
            pos__ = 0;
            size_t X0_j_2_max__ = P;
            size_t X0_j_1_max__ = N0;
            for (size_t j_2__ = 0; j_2__ < X0_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X0_j_1_max__; ++j_1__) {
                    X0(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 38;
            validate_non_negative_index("X", "N", N);
            validate_non_negative_index("X", "P", P);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(N,P));
            X = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, P);
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = P;
            size_t X_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    X(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 39;
            context__.validate_dims("data initialization", "intercept_prior_mean", "double", context__.to_vec());
            intercept_prior_mean = double(0);
            vals_r__ = context__.vals_r("intercept_prior_mean");
            pos__ = 0;
            intercept_prior_mean = vals_r__[pos__++];
            current_statement_begin__ = 40;
            context__.validate_dims("data initialization", "intercept_prior_sd", "double", context__.to_vec());
            intercept_prior_sd = double(0);
            vals_r__ = context__.vals_r("intercept_prior_sd");
            pos__ = 0;
            intercept_prior_sd = vals_r__[pos__++];
            check_greater_or_equal(function__, "intercept_prior_sd", intercept_prior_sd, 0);
            current_statement_begin__ = 41;
            validate_non_negative_index("reg_prior_mean", "P", P);
            context__.validate_dims("data initialization", "reg_prior_mean", "double", context__.to_vec(P));
            reg_prior_mean = std::vector<double>(P, double(0));
            vals_r__ = context__.vals_r("reg_prior_mean");
            pos__ = 0;
            size_t reg_prior_mean_k_0_max__ = P;
            for (size_t k_0__ = 0; k_0__ < reg_prior_mean_k_0_max__; ++k_0__) {
                reg_prior_mean[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 42;
            validate_non_negative_index("reg_prior_sd", "P", P);
            context__.validate_dims("data initialization", "reg_prior_sd", "double", context__.to_vec(P));
            reg_prior_sd = std::vector<double>(P, double(0));
            vals_r__ = context__.vals_r("reg_prior_sd");
            pos__ = 0;
            size_t reg_prior_sd_k_0_max__ = P;
            for (size_t k_0__ = 0; k_0__ < reg_prior_sd_k_0_max__; ++k_0__) {
                reg_prior_sd[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 43;
            context__.validate_dims("data initialization", "sigma_b_prior", "double", context__.to_vec());
            sigma_b_prior = double(0);
            vals_r__ = context__.vals_r("sigma_b_prior");
            pos__ = 0;
            sigma_b_prior = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_b_prior", sigma_b_prior, 0);
            current_statement_begin__ = 44;
            context__.validate_dims("data initialization", "sigma_prior", "double", context__.to_vec());
            sigma_prior = double(0);
            vals_r__ = context__.vals_r("sigma_prior");
            pos__ = 0;
            sigma_prior = vals_r__[pos__++];
            check_greater_or_equal(function__, "sigma_prior", sigma_prior, 0);
            current_statement_begin__ = 46;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 0);
            current_statement_begin__ = 47;
            validate_non_negative_index("a0_grid", "K", K);
            context__.validate_dims("data initialization", "a0_grid", "double", context__.to_vec(K));
            a0_grid = std::vector<double>(K, double(0));
            vals_r__ = context__.vals_r("a0_grid");
            pos__ = 0;
            size_t a0_grid_k_0_max__ = K;
            for (size_t k_0__ = 0; k_0__ < a0_grid_k_0_max__; ++k_0__) {
                a0_grid[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 48;
            validate_non_negative_index("C_grid", "K", K);
            context__.validate_dims("data initialization", "C_grid", "double", context__.to_vec(K));
            C_grid = std::vector<double>(K, double(0));
            vals_r__ = context__.vals_r("C_grid");
            pos__ = 0;
            size_t C_grid_k_0_max__ = K;
            for (size_t k_0__ = 0; k_0__ < C_grid_k_0_max__; ++k_0__) {
                C_grid[k_0__] = vals_r__[pos__++];
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 52;
            num_params_r__ += 1;
            current_statement_begin__ = 53;
            num_params_r__ += 1;
            current_statement_begin__ = 54;
            num_params_r__ += 1;
            current_statement_begin__ = 55;
            validate_non_negative_index("beta", "P", P);
            num_params_r__ += P;
            current_statement_begin__ = 56;
            validate_non_negative_index("eta_raw", "J", J);
            num_params_r__ += J;
            current_statement_begin__ = 57;
            validate_non_negative_index("eta0_raw", "J0", J0);
            num_params_r__ += J0;
            current_statement_begin__ = 58;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_Hier_PP_hnormal() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 52;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 53;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "alpha", "double", context__.to_vec());
        double alpha(0);
        alpha = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 54;
        if (!(context__.contains_r("sigma_eta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_eta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_eta");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_eta", "double", context__.to_vec());
        double sigma_eta(0);
        sigma_eta = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_eta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_eta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 55;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "P", P);
        context__.validate_dims("parameter initialization", "beta", "vector_d", context__.to_vec(P));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta(P);
        size_t beta_j_1_max__ = P;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            beta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 56;
        if (!(context__.contains_r("eta_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eta_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eta_raw");
        pos__ = 0U;
        validate_non_negative_index("eta_raw", "J", J);
        context__.validate_dims("parameter initialization", "eta_raw", "vector_d", context__.to_vec(J));
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta_raw(J);
        size_t eta_raw_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < eta_raw_j_1_max__; ++j_1__) {
            eta_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(eta_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eta_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 57;
        if (!(context__.contains_r("eta0_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eta0_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eta0_raw");
        pos__ = 0U;
        validate_non_negative_index("eta0_raw", "J0", J0);
        context__.validate_dims("parameter initialization", "eta0_raw", "vector_d", context__.to_vec(J0));
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta0_raw(J0);
        size_t eta0_raw_j_1_max__ = J0;
        for (size_t j_1__ = 0; j_1__ < eta0_raw_j_1_max__; ++j_1__) {
            eta0_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(eta0_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eta0_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 58;
        if (!(context__.contains_r("a_0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable a_0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("a_0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "a_0", "double", context__.to_vec());
        double a_0(0);
        a_0 = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, a_0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable a_0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 52;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0, lp__);
            else
                sigma = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 53;
            local_scalar_t__ alpha;
            (void) alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha = in__.scalar_constrain(lp__);
            else
                alpha = in__.scalar_constrain();
            current_statement_begin__ = 54;
            local_scalar_t__ sigma_eta;
            (void) sigma_eta;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_eta = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_eta = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 55;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.vector_constrain(P, lp__);
            else
                beta = in__.vector_constrain(P);
            current_statement_begin__ = 56;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta_raw;
            (void) eta_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                eta_raw = in__.vector_constrain(J, lp__);
            else
                eta_raw = in__.vector_constrain(J);
            current_statement_begin__ = 57;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta0_raw;
            (void) eta0_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                eta0_raw = in__.vector_constrain(J0, lp__);
            else
                eta0_raw = in__.vector_constrain(J0);
            current_statement_begin__ = 58;
            local_scalar_t__ a_0;
            (void) a_0;  // dummy to suppress unused var warning
            if (jacobian__)
                a_0 = in__.scalar_lub_constrain(0, 1, lp__);
            else
                a_0 = in__.scalar_lub_constrain(0, 1);
            // transformed parameters
            current_statement_begin__ = 62;
            validate_non_negative_index("eta", "J", J);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta(J);
            stan::math::initialize(eta, DUMMY_VAR__);
            stan::math::fill(eta, DUMMY_VAR__);
            stan::math::assign(eta,multiply(sigma_eta, eta_raw));
            current_statement_begin__ = 63;
            validate_non_negative_index("eta0", "J0", J0);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta0(J0);
            stan::math::initialize(eta0, DUMMY_VAR__);
            stan::math::fill(eta0, DUMMY_VAR__);
            stan::math::assign(eta0,multiply(sigma_eta, eta0_raw));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 62;
            size_t eta_j_1_max__ = J;
            for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(eta(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: eta" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable eta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 63;
            size_t eta0_j_1_max__ = J0;
            for (size_t j_1__ = 0; j_1__ < eta0_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(eta0(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: eta0" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable eta0: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            {
            current_statement_begin__ = 67;
            validate_non_negative_index("mu0", "N0", N0);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu0(N0);
            stan::math::initialize(mu0, DUMMY_VAR__);
            stan::math::fill(mu0, DUMMY_VAR__);
            stan::math::assign(mu0,add(add(stan::model::rvalue(eta0, stan::model::cons_list(stan::model::index_multi(Z0), stan::model::nil_index_list()), "eta0"), alpha), multiply(X0, beta)));
            current_statement_begin__ = 68;
            validate_non_negative_index("mu", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu(N);
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            stan::math::assign(mu,add(add(stan::model::rvalue(eta, stan::model::cons_list(stan::model::index_multi(Z), stan::model::nil_index_list()), "eta"), alpha), multiply(X, beta)));
            current_statement_begin__ = 70;
            lp_accum__.add((a_0 * normal_log(y0, mu0, sigma)));
            current_statement_begin__ = 71;
            lp_accum__.add(normal_log(eta0_raw, 0, 1));
            current_statement_begin__ = 72;
            lp_accum__.add(normal_log(eta_raw, 0, 1));
            current_statement_begin__ = 73;
            lp_accum__.add(normal_log(alpha, intercept_prior_mean, intercept_prior_sd));
            current_statement_begin__ = 74;
            for (int p = 1; p <= P; ++p) {
                current_statement_begin__ = 75;
                lp_accum__.add(normal_log(get_base1(beta, p, "beta", 1), get_base1(reg_prior_mean, p, "reg_prior_mean", 1), get_base1(reg_prior_sd, p, "reg_prior_sd", 1)));
            }
            current_statement_begin__ = 77;
            lp_accum__.add(exponential_log(sigma, sigma_prior));
            current_statement_begin__ = 78;
            lp_accum__.add(beta_log(a_0, 1, 1));
            current_statement_begin__ = 79;
            lp_accum__.add((normal_log(sigma_eta, 0, sigma_b_prior) - normal_ccdf_log(0, 0, sigma_b_prior)));
            current_statement_begin__ = 80;
            lp_accum__.add(-(approximate_ca0(a_0, a0_grid, C_grid, pstream__)));
            current_statement_begin__ = 82;
            lp_accum__.add(normal_log(y, mu, sigma));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("sigma");
        names__.push_back("alpha");
        names__.push_back("sigma_eta");
        names__.push_back("beta");
        names__.push_back("eta_raw");
        names__.push_back("eta0_raw");
        names__.push_back("a_0");
        names__.push_back("eta");
        names__.push_back("eta0");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_Hier_PP_hnormal_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma);
        double alpha = in__.scalar_constrain();
        vars__.push_back(alpha);
        double sigma_eta = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_eta);
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta = in__.vector_constrain(P);
        size_t beta_j_1_max__ = P;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            vars__.push_back(beta(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta_raw = in__.vector_constrain(J);
        size_t eta_raw_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < eta_raw_j_1_max__; ++j_1__) {
            vars__.push_back(eta_raw(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta0_raw = in__.vector_constrain(J0);
        size_t eta0_raw_j_1_max__ = J0;
        for (size_t j_1__ = 0; j_1__ < eta0_raw_j_1_max__; ++j_1__) {
            vars__.push_back(eta0_raw(j_1__));
        }
        double a_0 = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(a_0);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 62;
            validate_non_negative_index("eta", "J", J);
            Eigen::Matrix<double, Eigen::Dynamic, 1> eta(J);
            stan::math::initialize(eta, DUMMY_VAR__);
            stan::math::fill(eta, DUMMY_VAR__);
            stan::math::assign(eta,multiply(sigma_eta, eta_raw));
            current_statement_begin__ = 63;
            validate_non_negative_index("eta0", "J0", J0);
            Eigen::Matrix<double, Eigen::Dynamic, 1> eta0(J0);
            stan::math::initialize(eta0, DUMMY_VAR__);
            stan::math::fill(eta0, DUMMY_VAR__);
            stan::math::assign(eta0,multiply(sigma_eta, eta0_raw));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t eta_j_1_max__ = J;
                for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
                    vars__.push_back(eta(j_1__));
                }
                size_t eta0_j_1_max__ = J0;
                for (size_t j_1__ = 0; j_1__ < eta0_j_1_max__; ++j_1__) {
                    vars__.push_back(eta0(j_1__));
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_Hier_PP_hnormal";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_eta";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_j_1_max__ = P;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t eta_raw_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < eta_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t eta0_raw_j_1_max__ = J0;
        for (size_t j_1__ = 0; j_1__ < eta0_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta0_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "a_0";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t eta_j_1_max__ = J;
            for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "eta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t eta0_j_1_max__ = J0;
            for (size_t j_1__ = 0; j_1__ < eta0_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "eta0" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_eta";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_j_1_max__ = P;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t eta_raw_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < eta_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t eta0_raw_j_1_max__ = J0;
        for (size_t j_1__ = 0; j_1__ < eta0_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta0_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "a_0";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t eta_j_1_max__ = J;
            for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "eta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t eta0_j_1_max__ = J0;
            for (size_t j_1__ = 0; j_1__ < eta0_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "eta0" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_Hier_PP_hnormal_namespace::model_Hier_PP_hnormal stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
